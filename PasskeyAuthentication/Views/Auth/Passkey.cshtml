<button id="create-passkey" type="button" class="btn btn-primary">Create a key</button>
<script>
    async function post(path, payload = '') {
        const headers = {
            'X-Requested-With': 'XMLHttpRequest',
        };
        if (payload && !(payload instanceof FormData)) {
            headers['Content-Type'] = 'application/json';
            payload = JSON.stringify(payload);
        }
        const res = await fetch(path, {
            method: 'POST',
            credentials: 'same-origin',
            headers: headers,
            body: payload,
        });
        if (res.ok) {
            // Server authentication succeeded
            return res.json();
        } else {
            // Server authentication failed
            const result = await res.json();
            result.status = res.status;
            throw result;
        }
    }
    
    let controller = new AbortController();
    async function registerCredential(conditional = false) {
        // Abort ongoing WebAuthn request
        controller.abort();
        controller = new AbortController();

        // Fetch passkey creation options from the server.
        const _options = await post('/auth/registerRequest');

        // Base64URL decode some values
        const options = PublicKeyCredential.parseCreationOptionsFromJSON(_options);

        // Use platform authenticator and discoverable credential
        options.authenticatorSelection = {
            authenticatorAttachment: 'platform',
            requireResidentKey: true
        }

        // Invoke WebAuthn create
        const cred = await navigator.credentials.create({
            publicKey: options,
            signal: controller.signal,
            // Request conditional creation
            mediation: conditional ? 'conditional' : 'optional'
        });

        const credential = cred.toJSON();

        const path = conditional ? '/auth/registerResponse?conditional' : '/auth/registerResponse';

        // Send the result to the server and return the promise.
        try {
            const result = await post(path, credential);
            return result;
        } catch (e) {
            // Detect if the credential was not found.
            if (PublicKeyCredential.signalUnknownCredential) {
                // Send a signal to delete the credential that was just created.
                await PublicKeyCredential.signalUnknownCredential({
                    rpId: options.rp.id,
                    credentialId: credential.id,
                });
                console.info('The passkey failed to register has been signaled to the password manager.');
            }
            throw new Error(e.error);
        }
    }
</script>
<script>
    const createPasskey = $('#create-passkey');
    
    /**
     * Render the list of saved credentials.
     */
    async function renderCredentials() {
        console.log('renderCredentials')
    }
    
    /**
     * Create a new paskey and register the credential.
     */
    async function register() {
        try {
            await registerCredential();
            await renderCredentials();
        } catch (e) {
            // 'InvalidStateError' indicates a passkey already exists on the device.
            if (e.name === 'InvalidStateError') {
                alert('A passkey already exists for this device.');
                // `NotAllowedError` indicates the user canceled the operation.
            } else if (e.name === 'NotAllowedError' || e.name === 'AbortError') {
                return;
                // Show other errors in an alert.
            } else {
                alert(e.message);
                console.error(e);
            }
        }
    }
    
    createPasskey.click(register);
</script>